// CUP specification for ReactivityEngine parser

package com.pervasa.reactivity;

import com.pervasa.reactivity.Engine.ListType;
import java.util.ArrayList;

/* Preliminaries */
parser code {:

  Engine e;
  
  public parser(Lexer l, Engine e) {
   	this(l);
  	this.e = e;
  }
  
	private void error(String s) {
		System.out.println(s);
	}
  
  public void syntax_error(java_cup.runtime.Symbol current) {
    report_error(Syntax.error(current), current);
  }
  
  public void report_error(String message, java_cup.runtime.Symbol info) {
    error(message);
  }
  
:}

/* Terminals (tokens returned by the scanner) */
terminal Integer NUMBER;
terminal String  IDENTIFIER, TIME, DATE;
terminal     	 DEFINE, LIST, BASIC, SET, RUN, STOP, LOAD;
terminal     	 EVENT, CONDITION, ACT, RULE;
terminal     	 EQUALS, TRUE, FALSE, PLUS, MINUS, STAR, PERCENT, NIL, INF;
terminal     	 LPAREN, RPAREN, LANGLE, RANGLE;
terminal     	 SEMI, COMMA, SLASH, COLON;

/* Non-terminals */
non terminal cmds, cmd, basic, list, define;
non terminal Boolean boolean;
non terminal Condition condition;
non terminal Action act;
non terminal ArrayList<Action> acts;
non terminal Event event, events, factor;
non terminal Rule rule;
non terminal Window window;
non terminal EvalFreq eval_freq;
non terminal Integer number, report_freq; 

/* Precedences */
precedence left PLUS;
precedence left STAR;
precedence left SEMI;

/* The Actual Grammar */

cmd	::=
	  basic
	| list
	| define
	| SET IDENTIFIER:i EQUALS boolean:b
		{: parser.e.setCondition(i, b); :}
	| RUN
		{: parser.e.run(); :}
	| STOP
		{: parser.e.stop(); :}
	| LOAD IDENTIFIER:i
		{: parser.e.loadFile(i); :}
	| /* no input */
		{: /* Do nothing! */ :}
	| error
	;

basic ::= 
	  BASIC
		{: parser.e.list(ListType.BASIC); :}
	| BASIC EVENT
		{: parser.e.list(ListType.BASICEVENT); :}
	| BASIC ACT
		{: parser.e.list(ListType.BASICACTION); :}
	;
	
list ::=
	 LIST
	 {: parser.e.list(ListType.ALL); :}
	 |   LIST EVENT
	 {: parser.e.list(ListType.EVENT); :}
	 |   LIST ACT
	 {: parser.e.list(ListType.ACTION); :}
	 |   LIST CONDITION
	 {: parser.e.list(ListType.CONDITION); :} 
	 |   LIST RULE
	 {: parser.e.list(ListType.RULE); :}
	 ;
	 
define	 ::=
	DEFINE EVENT IDENTIFIER:i EQUALS events:e
	{: 
		if (e == null) {
			// null indicates that an invalid event was specified
			// Therefore: do nothing
		} else {
			parser.e.defineEvent(i, e);
		}
	:}
	| DEFINE ACT IDENTIFIER:i EQUALS acts:a
	{:
		if (a == null) {
			// Empty string indicates that an invalid action was specified
			// Therefore: do nothing.
		} else {
			parser.e.defineAction(i, a);
		}
	:}
	 |   DEFINE CONDITION IDENTIFIER:i EQUALS condition:c
	{: parser.e.defineCondition(i, c); :}
	 |   DEFINE RULE IDENTIFIER:i EQUALS rule:r
	{: parser.e.defineRule(i, r); :}
	 ;
	 
rule ::=
	events:e COMMA condition:c COMMA act:a
	{:
		RESULT = parser.e.createRule(e, c, a);
	:}
	| IDENTIFIER:i
	{:
		RESULT = parser.e.getRule(i);
	:}
	;

events ::= 
	events:e1 PLUS factor:e2
	{:
		RESULT = null;
		if (e1 == null || e2 == null) {
		} else { 
			RESULT = new CompositeEvent(e1,CompositeEvent.Operator.PLUS,e2);
		}
	:}
	| factor:e
	{:
		RESULT = null;
		if (e == null) {
		} else { 
			RESULT = e;
		}
	:}
	;
	

factor ::=
	factor:e1 STAR NUMBER:n STAR event:e2
	{:
		RESULT = null;
		if (e1 == null || e2 == null) {
		} else { 
			RESULT = new CompositeEvent(e1,n,e2);
		}
	:}
	| factor:e1 STAR event:e2
	{:
		RESULT = null;
		if (e1 == null || e2 == null) {
			// null indicates that e2 is an invalid event
			// Therefore: do nothing
		} else {
			RESULT = new CompositeEvent(e1,CompositeEvent.Operator.PLUS,e2);
		}
	:}
	| event:e
	{:
		RESULT = null;
		if (e == null) {
			// Null indicates that e is an invalid event
			// Therefore: do nothing
		} else {
			RESULT = e;
		}
	:}
	;
		
event ::=		
	IDENTIFIER:i LPAREN number:n RPAREN
	{:
		RESULT = parser.e.createEvent(i,n);
	:}
	| IDENTIFIER:i LPAREN number:n1 COMMA number:n2 RPAREN
	{:
		RESULT = parser.e.createEvent(i,n1,n2);
	:}	
	| LANGLE window:w COMMA eval_freq:e COMMA report_freq:n RANGLE LPAREN events:i RPAREN
	{:
		RESULT = null;
		if (i == null) {
			// do nothing
		} else {
			RESULT = parser.e.createTFMEvent(i,w,e,n);
		}
	:}
	| IDENTIFIER:i
	{:
		RESULT = parser.e.getEvent(i);
	:}
	;	
	
window ::=
	NIL
	{:
		RESULT = new Window();
	:}
	| DATE:d1 SLASH TIME:t1 MINUS DATE:d2 SLASH TIME:t2
	{:
		RESULT = new Window(d1,t1,d2,t2);
	:}
	| TIME:t1 MINUS TIME:t2
	{:
		RESULT = new Window(t1,t2);
	:}
	| DATE:d1 MINUS DATE:d2
	{:
		RESULT = new Window(d1,"00:00:00",d2,"00:00:00");
	:}
	;	

eval_freq ::=
	NUMBER:n
	{:
		RESULT = new EvalFreq(n);
	:}
	| INF
	{:
		RESULT = new EvalFreq();
	:}  
	;
	
report_freq ::=
	NUMBER:n
	{:
		RESULT = n;
	:}
	| NUMBER:n PERCENT
	{:
		RESULT = n;
	:}
	;
	
condition ::=
	IDENTIFIER:i
	{:
		RESULT = parser.e.getCondition(i);
	:}
	| boolean:b
	{:
		RESULT = parser.e.createCondition(b);
	:}
	;

boolean ::=
	  TRUE
	{: RESULT = true; :}
	| FALSE
	{: RESULT = false; :}
	;
	
act ::= 
	LPAREN acts:a RPAREN
	{:
		RESULT = null;
		if (a == null) {
			// return null
		} else {
			RESULT = new CompositeAction(a);
		}
	:}
	| IDENTIFIER:i
	{:
		RESULT = parser.e.getAction(i);
	:}
	| IDENTIFIER:i LPAREN NUMBER:n RPAREN
	{:
		RESULT = parser.e.createAction(i,n);
	:}
	;

acts ::=
	acts:a1 SEMI act:a2
	{:
		RESULT = null;
		if (a2 == null) {
			// return null
		} else {
			if (a1 != null) {
				a1.add(a2);
				RESULT = a1;
			}
		}
	:}
	|
	act:a
	{:
		RESULT = null;
		if (a == null) {
			// do nothing
		} else {
			ArrayList<Action> list = new ArrayList<Action>();
			list.add(a);
			RESULT = list;
		}
	:}
	;
	
number ::=
	NUMBER:n
	{:
		RESULT = n;
	:}
	| MINUS NUMBER:n
	{:
		RESULT = n * -1;
	:}
	;


	  