// CUP specification for ReactivityEngine parser

package com.pervasa.reactivity;

/* Preliminaries */
parser code {:

  ReactiveEngine re;
  
  public parser(Lexer l, ReactiveEngine re) {
   	this(l);
  	this.re = re;
  }
  
  public void syntax_error(java_cup.runtime.Symbol current) {
    report_error("Syntax error (" + current.sym + ")", current);
  }
  public void report_error(String message, java_cup.runtime.Symbol info) {
    re.error(message);
  }
  
:}

/* Terminals (tokens returned by the scanner) */
terminal Integer NUMBER;
terminal String  IDENTIFIER;
terminal     	 DEFINE, LIST, BASIC, SET, RUN, STOP, LOAD;
terminal     	 EVENT, CONDITION, ACT, RULE;
terminal     	 EQUALS, TRUE, FALSE, PLUS, STAR;
terminal     	 LPAREN, RPAREN, LBRACKET, RBRACKET;
terminal     	 SEMI, COMMA, WHACKWHACK;

/* Non-terminals */
non terminal cmd, basic, list, define;
non terminal Boolean boolean;
non terminal String act, acts, event, events, eventoperator;

/* Precedences */
precedence left PLUS;
precedence left STAR;
precedence left SEMI;

/* The grammar */
cmd	::=
	  basic
	| list
	| define
	| SET IDENTIFIER:i EQUALS boolean:b
		{: parser.re.setCondition(i, b); :}
	| RUN
		{: parser.re.runCommand(); :}
	| STOP
		{: parser.re.stopCommand(); :}
	| LOAD IDENTIFIER
	;

basic ::= 
	  BASIC
		{: parser.re.listBasic(); :}
	| BASIC EVENT
		{: parser.re.listBasicEvents(); :}
	| BASIC ACT
		{: parser.re.listBasicActions(); :}
	;
	
list ::=
	 LIST
	 {: parser.re.listAll(); :}
	 |   LIST EVENT
	 {: parser.re.listEvents(); :}
	 |   LIST ACT
	 {: parser.re.listActions(); :}
	 |   LIST CONDITION
	 {: parser.re.listConditions(); :}
	 |   LIST RULE
	 {: parser.re.listRules(); :}
	 ;
	 
define	 ::=
	DEFINE EVENT IDENTIFIER:i EQUALS events:e
	{: 
		if (e.matches("")) {
			// Empty string indicates that an invalid event was specified
			// Therefore: do nothing
		} else {
			parser.re.defineEvent(i, e, e);
		}
	:}
	|   DEFINE ACT IDENTIFIER:i EQUALS acts:a
	{:
		if (a.matches("")) {
			// Empty string indicates that an invalid action was specified
			// Therefore: do nothing.
		} else {
			parser.re.defineAction(i, a, a);
		}
	:}
	 |   DEFINE CONDITION IDENTIFIER:i EQUALS boolean:b
	{: parser.re.defineCondition(i, b); :}
	 |   DEFINE RULE IDENTIFIER:i EQUALS IDENTIFIER:e COMMA IDENTIFIER:c COMMA IDENTIFIER:a
	{: parser.re.defineRule(i, e, c, a); :}
	 ;

events ::= 
	events:e1 eventoperator:o event:e2
	{:
		RESULT = "";
		if (e2.matches("")) {
			// Empty string indicates that e2 is an invalid event
			// Therefore: do nothing
		} else {
			RESULT = e1 + o + e2;
		}
	:}
	|
	event:e
	{:
		RESULT = "";
		if (e.matches("")) {
			// Empty string indicates that e is an invalid event
			// Therefore: do nothing
		} else {
			RESULT = e;
		}
	:}
	;
	
eventoperator ::=
	STAR
	{: RESULT = "*"; :}
	| PLUS
	{: RESULT = "+"; :}
	;
	
event ::=
	event:e1 STAR NUMBER:n STAR event:e2
	{:
		RESULT = "";
		if (e1.matches("") || e2.matches("")) {
		} else { 
			RESULT = e1 + "*" + n + "*" + e2;
		}
	:}
	| IDENTIFIER:i LPAREN NUMBER:n RPAREN
	{:
		RESULT = "";
		String basicEvent = i + "(" + n + ")";
		if (parser.re.basicEventExists(i)) {
			RESULT = basicEvent;
		} else {
			parser.re.error("Event '" + basicEvent + " does not exist.");
		}
	:}
	| IDENTIFIER:i LBRACKET NUMBER:n1 COMMA NUMBER:n2 RBRACKET
	{:
		RESULT = "";
	  	String basicEvent = i + "[" + n1 + "," + n2 + "]";
	  	if (parser.re.basicEventExists(i)) {
	  		RESULT = basicEvent;
	  	} else {
	  		parser.re.error("Event '" + basicEvent + " does not exist.");
	  	}
	:}
	| IDENTIFIER:i
	{:
		RESULT = "";
		String expansion = parser.re.evaluateAtomicEvent(i);
		if (expansion.matches("invalid")) {
			parser.re.error("Expansion of '" + i + " failed.");
		} else {
			RESULT = expansion;
		}
	:}
	;	
		
boolean ::=
	TRUE
	{: RESULT = true; :}
	  | FALSE
	  {: RESULT = false; :}
	  ;

acts ::=
	acts:s1 SEMI act:s2
	{:
		RESULT = "";
		if (s2.matches("")) {
		} else {
			RESULT = s1 + ";" + s2;
		}
	:}
	|
	act:s
	{:
		RESULT = "";
		if (s.matches("")) {
		} else {
			RESULT = s;
		}
	:}
	;
	
	
act ::= 
	IDENTIFIER:i
	{:
		RESULT = ""; 
		String expansion = parser.re.evaluateAction(i);
		if (expansion.matches("invalid")) {
		} else {
			RESULT = expansion;
		}
	:}
	  |   IDENTIFIER:i LPAREN NUMBER:n RPAREN
	 {:
	 	RESULT = "";
	  	String basicAction = i + "(" + n + ")";
	  	if (parser.re.basicActionExists(i)) {
	  		RESULT = basicAction;
	  	} else {}
	 :}
	  ;

	  