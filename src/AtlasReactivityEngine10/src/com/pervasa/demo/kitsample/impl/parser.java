package com.pervasa.demo.kitsample.impl;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 21 05:51:59 EST 2009
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 21 05:51:59 EST 2009
  */
public class parser extends java_cup.runtime.lr_parser {
	
	private ReactiveEngine r;

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  
  /** Constructor which sets the default scanner and passes an RE ref. */
  public parser(java_cup.runtime.Scanner s, ReactiveEngine r) {super(s);this.r = r;}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\006\000\002\002\003" +
    "\000\002\002\003\000\002\002\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\006\006\000\002\006\010\000" +
    "\002\006\005\000\002\006\005\000\002\006\007\000\002" +
    "\007\003\000\002\007\003\000\002\010\005\000\002\010" +
    "\006\000\002\011\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\020\006\005\007\012\010\004\011\010\012" +
    "\016\013\014\014\015\001\002\000\010\002\ufff9\015\107" +
    "\017\110\001\002\000\012\015\034\016\033\017\035\020" +
    "\032\001\002\000\004\002\031\001\002\000\004\002\001" +
    "\001\002\000\004\005\024\001\002\000\004\002\ufffe\001" +
    "\002\000\014\002\ufff6\015\022\016\021\017\023\020\020" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffb\001" +
    "\002\000\004\005\017\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\ufffa\001\002\000\004\002\ufff2\001\002\000" +
    "\004\002\ufff3\001\002\000\004\002\ufff5\001\002\000\004" +
    "\002\ufff4\001\002\000\004\021\025\001\002\000\006\022" +
    "\026\023\027\001\002\000\006\002\uffe8\033\uffe8\001\002" +
    "\000\006\002\uffe7\033\uffe7\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\000\001\002\000\004\005\075\001\002" +
    "\000\004\005\072\001\002\000\004\005\047\001\002\000" +
    "\004\005\036\001\002\000\004\021\037\001\002\000\004" +
    "\005\041\001\002\000\006\002\ufff0\032\045\001\002\000" +
    "\004\026\042\001\002\000\004\004\043\001\002\000\004" +
    "\027\044\001\002\000\010\002\uffe5\032\uffe5\034\uffe5\001" +
    "\002\000\004\005\041\001\002\000\010\002\uffe6\032\uffe6" +
    "\034\uffe6\001\002\000\004\021\050\001\002\000\004\005" +
    "\051\001\002\000\006\026\062\030\063\001\002\000\010" +
    "\002\ufff1\024\054\025\053\001\002\000\006\004\056\005" +
    "\051\001\002\000\004\005\051\001\002\000\012\002\uffeb" +
    "\024\uffeb\025\053\033\uffeb\001\002\000\004\025\060\001" +
    "\002\000\012\002\uffea\024\uffea\025\uffea\033\uffea\001\002" +
    "\000\004\005\051\001\002\000\012\002\uffe9\024\uffe9\025" +
    "\uffe9\033\uffe9\001\002\000\004\004\070\001\002\000\004" +
    "\004\064\001\002\000\004\033\065\001\002\000\004\004" +
    "\066\001\002\000\004\031\067\001\002\000\012\002\uffec" +
    "\024\uffec\025\uffec\033\uffec\001\002\000\004\027\071\001" +
    "\002\000\012\002\uffed\024\uffed\025\uffed\033\uffed\001\002" +
    "\000\004\021\073\001\002\000\006\022\026\023\027\001" +
    "\002\000\004\002\uffef\001\002\000\004\021\076\001\002" +
    "\000\004\034\077\001\002\000\004\005\051\001\002\000" +
    "\004\002\uffee\001\002\000\010\024\054\025\053\033\102" +
    "\001\002\000\006\022\026\023\027\001\002\000\004\033" +
    "\104\001\002\000\004\005\041\001\002\000\006\032\045" +
    "\034\106\001\002\000\004\002\uffe4\001\002\000\004\002" +
    "\ufff8\001\002\000\004\002\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\012\002\005\003\006\004\012\005\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\056" +
    "\001\001\000\004\006\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\077\001\001\000\004\006\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\102" +
    "\001\001\000\002\001\001\000\004\010\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this, this.r);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;
  private final ReactiveEngine r;

  /** Constructor */
  CUP$parser$actions(parser parser, ReactiveEngine r) {
    this.parser = parser;
    this.r = r;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rule ::= WHACKWHACK event COMMA condition COMMA act WHACKWHACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rule",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // act ::= IDENTIFIER LPAREN NUMBER RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("act",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // act ::= act SEMI act 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("act",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condition ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // event ::= event STAR NUMBER STAR event 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // event ::= event STAR event 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // event ::= event PLUS event 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // event ::= IDENTIFIER LBRACKET NUMBER COMMA NUMBER RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // event ::= IDENTIFIER LPAREN NUMBER RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("event",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // define ::= DEFINE RULE IDENTIFIER EQUALS rule 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // define ::= DEFINE CONDITION IDENTIFIER EQUALS condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // define ::= DEFINE ACT IDENTIFIER EQUALS act 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // define ::= DEFINE EVENT IDENTIFIER EQUALS event 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list ::= LIST RULE 
            {
              Object RESULT =null;
		 this.r.listRules(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // list ::= LIST CONDITION 
            {
              Object RESULT =null;
		 this.r.listConditions(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // list ::= LIST ACT 
            {
              Object RESULT =null;
		 this.r.listActions(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list ::= LIST EVENT 
            {
              Object RESULT =null;
		 r.listEvents(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list ::= LIST 
            {
              Object RESULT =null;
		 r.listAll(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // basic ::= BASIC ACT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // basic ::= BASIC EVENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // basic ::= BASIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cmd ::= LOAD IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cmd ::= STOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cmd ::= RUN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cmd ::= SET IDENTIFIER EQUALS condition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cmd ::= define 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cmd ::= list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cmd EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cmd ::= basic 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

